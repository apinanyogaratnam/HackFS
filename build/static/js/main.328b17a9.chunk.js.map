{"version":3,"sources":["Hooks/useWindowPosition.js","Contexts/ModalProvider.js","live_peer_integration/live_peer_data.js","live_peer_integration/live_peer_api.js","Components/video_player.js","Components/main_recorder.js","Components/window_content.js","Components/Modal.js","App.js","index.js"],"names":["useWindowPosition","windowPosition","x","y","ModalContext","React","createContext","ModalProvider","children","useState","undefined","extensionId","setExtensionId","useEffect","window","addEventListener","event","source","data","type","Provider","value","getExtensionId","postMessage","live_peer_data","LivePeerAPI","setData","livepeerObject","require","process","Stream","create","then","res","console","log","streamKey","playbackId","VideoPlayer","MainRecorder","recorder","setRecorder","stream","setStream","videoBlob","setVideoUrlBlob","startRecording","a","mediaDevices","navigator","getDisplayMedia","video","audio","RecordRTCPromisesHandler","stopRecording","getBlob","blob","stop","alert","onClick","saveAs","src","URL","createObjectURL","WindowContent","className","livePeerServerUrl","Modal","Consumer","hasDraggedWindowPosition","handle","defaultPosition","position","id","style","transform","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.328b17a9.chunk.js","sourcesContent":["\nconst useWindowPosition = () => {\n  return {\n    windowPosition:  { x: 1000, y: -20 },\n  }\n};\n\nexport default useWindowPosition;\n","import React, { useEffect, useState } from 'react';\nimport useWindowPosition from '../Hooks/useWindowPosition';\n\nexport const ModalContext = React.createContext({});\n\nconst ModalProvider = ({ children }) => {\n  const { windowPosition } = useWindowPosition();\n  const [extensionId, setExtensionId] = useState(undefined);\n\n  function getExtensionId() {\n    window.postMessage({ type: \"GET_EXTENSION_ID\" }, \"*\");\n  }\n\n  useEffect(() => {\n    // Set up event listeners from Content script\n    window.addEventListener(\"message\", function(event) {\n      if (event.source !== window) return;\n      if (event.data.type && (event.data.type === \"EXTENSION_ID_RESULT\")) {\n        setExtensionId(event.data.extensionId);\n      }\n    });\n  }, []);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        extensionId,\n        getExtensionId,\n        windowPosition,\n      }}\n    >\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\nexport default ModalProvider;\n","const live_peer_data = {\n    \"livePeerServerUrl\": \"rtmp://rtmp.livepeer.com/live/\",\n    \"streamKey\": \"example stream key goes here\",\n    \"playbackUrl\": \"https://cdn.livepeer.com/hls/unique_playback_id_goes_here/index.m3u8\"\n}\n\nexport default live_peer_data;\n","import React, { useState, useEffect } from 'react'\n\nconst LivePeerAPI = () => {\n    const [data, setData] = useState([]);\n    const Livepeer = require('livepeer-nodejs');\n    const api_key = process.env.REACT_APP_API_KEY;\n    const livepeerObject = new Livepeer(api_key);\n\n    const stream = () => {\n        livepeerObject.Stream.create({\n            \"name\": \"test_stream\", \n            \"profiles\": [\n                {\n                    \"name\": \"720p\",\n                    \"bitrate\": 2000000,\n                    \"fps\": 30,\n                    \"width\": 1280,\n                    \"height\": 720\n                },\n                {\n                    \"name\": \"480p\",\n                    \"bitrate\": 1000000,\n                    \"fps\": 30,\n                    \"width\": 854,\n                    \"height\": 480\n                },\n                {\n                    \"name\": \"360p\",\n                    \"bitrate\": 500000,\n                    \"fps\": 30,\n                    \"width\": 640,\n                    \"height\": 360\n                },\n            ],\n            \"record\": true\n        }).then(res => {\n            console.log(res);\n            setData(res);\n        })\n    }\n\n    useEffect(() => {\n        stream();\n    }, [])\n\n    return (\n        <div>\n            <p>Stream Key: {data.streamKey}</p>\n            <p>Playback URL: https://cdn.livepeer.com/hls/{data.playbackId}/index.m3u8</p>\n        </div>\n    )\n}\n\nexport default LivePeerAPI;\n","import React from 'react';\nimport { Player } from 'video-react';\nimport \"video-react/dist/video-react.css\"; // import css\n\nconst VideoPlayer = () => {\n    const sintel_trailer_url = \"https://media.w3.org/2010/05/sintel/trailer_hd.mp4\";\n    const test_url = \"https://cdn.livepeer.com/hls/105dqxa9zszpduw5/index.m3u8\";\n    const some_youtube_url = \"https://www.youtube.com/watch?v=7sDY4m8KNLc\";\n\n    return (\n        <div>\n            {/* React component for video player */}\n            {/* <Player\n                playsInline\n                poster=\"/assets/poster.png\"\n                src={some_youtube_url}\n            /> */}\n        </div>\n    );\n}\n\nexport default VideoPlayer;\n","import React, { useState } from 'react';\nimport { RecordRTCPromisesHandler } from 'recordrtc';\nimport { saveAs } from 'file-saver';\nimport { Player } from 'video-react';\nimport \"video-react/dist/video-react.css\"; // import css\n\nconst MainRecorder = () => {\n    // using states to store data relatively depending on user's actions\n    const [recorder, setRecorder] = useState(null);\n    const [stream, setStream] = useState(null);\n    const [videoBlob, setVideoUrlBlob] = useState(null);\n\n    // function to start recording video and audio\n    const startRecording = async () => {\n        let mediaDevices = navigator.mediaDevices;\n        const stream = await mediaDevices.getDisplayMedia({video: true, audio: false});\n        const recorder = new RecordRTCPromisesHandler(stream, {\n            type: 'video'\n        });\n        \n        await recorder.startRecording();\n\n        // storing the data in the states\n        setRecorder(recorder);\n        setStream(stream);\n        setVideoUrlBlob(null);\n    }\n\n    // function to stop recording audio and video\n    const stopRecording = async () => {\n        if (recorder) {\n            await recorder.stopRecording();\n            const blob = await recorder.getBlob();\n            stream.stop()\n\n            // storing the data in the states\n            setVideoUrlBlob(blob);\n            setStream(null);\n            setRecorder(null);\n            \n            return;\n        }\n\n        alert(\"No video streaming currently to stop\");\n    }\n\n    const downloadRecording = () => {\n        if (videoBlob) {\n            saveAs(videoBlob, \"recording.webm\");\n            return;\n        }\n\n        alert(\"No video streamed to download\");\n    }\n\n    return (\n        <div>\n            <button onClick={startRecording}>Start streaming</button>\n            <button onClick={stopRecording}>Stop streaming</button>\n            <button onClick={downloadRecording}>Download Stream</button>\n            {!!videoBlob && (<Player src={window.URL.createObjectURL(videoBlob)} />)}\n        </div>\n    );\n}\n\nexport default MainRecorder;\n","import React, { useState } from 'react';\nimport live_peer_data from '../live_peer_integration/live_peer_data';\nimport '../css/window.scss';\nimport ShakaPlayer from 'shaka-player-react';\nimport 'shaka-player/dist/controls.css';\nimport LivePeerAPI from '../live_peer_integration/live_peer_api';\nimport { Player } from 'video-react';\nimport VideoPlayer from './video_player.js';\nimport MainRecorder from './main_recorder';\n\nconst WindowContent = () => {\n    // url to play in the video player\n    const example_video_url = \"https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd\";\n\n    return (\n        <div>\n            <h4 className=\"text\">\n                Connect via OBS Studio:\n                <br />\n                Set OBS settings: settings {'>'} stream. set service to custom\n                <br />\n                set server to: {live_peer_data.livePeerServerUrl}\n                <br />\n                <LivePeerAPI className=\"live-peer-data\"/>\n            </h4>\n            <MainRecorder />\n            {/* <ShakaPlayer autoPlay src=\"\" /> */}\n            <VideoPlayer />\n        </div>\n    );\n}\n\nexport default WindowContent;\n","import React from 'react';\nimport { X } from 'react-feather';\nimport Draggable from 'react-draggable';\nimport { ModalContext } from '../Contexts/ModalProvider';\nimport '../css/window.scss';\nimport WindowContent from './window_content';\n\nconst Modal = () => {\n  return (\n    <ModalContext.Consumer>\n      {({ windowPosition, hasDraggedWindowPosition, extensionId, getExtensionId }) => (\n        <Draggable\n          handle=\".modal-handle\"\n          defaultPosition={{x: windowPosition.x, y: windowPosition.y}}\n          position={hasDraggedWindowPosition ? { x: windowPosition.x, y: windowPosition.y } : null}\n        >\n          <div id=\"modal\" className=\"modal-window\" style={{\n            transform: windowPosition,\n        }}>\n            <div className=\"modal-window-inner-border\">\n                <>\n                  <div className=\"modal-body\">\n                      <div className=\"modal-handle\">\n                          <div className=\"modal-close-button\">\n                              {/* <a onClick={() => null}>\n                              <X color=\"#5d6484\" size=\"14\" />\n                              </a> */}\n                          </div>\n                          <h6 className=\"handle-text\">Click to drag</h6>\n                      </div>\n                    <div className=\"modal-content\">\n                      <h3>{extensionId}</h3>\n                      {/* <button\n                        onClick={getExtensionId}\n                        className=\"modal-button\"\n                      >\n                        Get Extension ID\n                      </button> */}\n                      {/* <button className=\"some-button\">Some Button to do Something</button> */}\n                      <WindowContent />\n                    </div>\n                  </div>\n                </>\n              </div>\n          </div>\n        </Draggable>\n      )}\n    </ModalContext.Consumer>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport './App.css';\nimport Modal from './Components/Modal';\nimport ModalProvider from './Contexts/ModalProvider';\n\n/**\n * @return {null}\n */\nfunction App() {\n  return (\n    <ModalProvider>\n      <Modal />\n    </ModalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>, document.getElementById('modal-window'));\n"],"sourceRoot":""}